{"mappings":"iiBAMA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAmCpC,SAASC,EAAUC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC7BC,EAAAT,GAASU,OAAOC,QAAQ,uBAAwCC,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAGxE,SAASK,EAAQP,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC3BC,EAAAT,GAASU,OAAOI,QAAQ,sBAAqCF,OAAfL,EAAS,QAAYK,OAANJ,EAAM,M,CAvCrEN,EAAKa,iBAAiB,UAEtB,SAAkBC,G,kBAQd,IAAMR,EAAQS,EAAaC,EAAOC,EAC5BZ,EAAWY,EAAI,EAErBC,YAAW,YASf,SAAuBb,EAAUC,GAC/B,IAAMa,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACnBL,EACFI,EAAI,CAAElB,WAAUC,UAEhBkB,EAAI,CAAEnB,WAAUC,S,KAfhBmB,CAAcpB,EAAUC,GACrBoB,KAAKvB,GACLwB,MAAMhB,GACNiB,SAAQ,W,OAAM5B,EAAK6B,O,MACrBvB,E,EAfLQ,EAAEgB,iBAMF,IAJA,IAAMf,EAAagB,OAAO/B,EAAKM,MAAM0B,OAC/BhB,EAAOe,OAAO/B,EAAKgB,KAAKgB,OACxBC,EAASF,OAAO/B,EAAKiC,OAAOD,OAEzBE,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["// ✅ Напиши скрипт, который при сабмите формы вызывает функцию createPromise(position, delay) столько раз, сколько ввели в поле amount.\n// ✅ При каждом вызове передай ей номер создаваемого промиса(position) и задержку учитывая введенную пользователем первую задержку(delay) и шаг(step).\n// ✅ Дополни код функции createPromise так, чтобы она возвращала один промис, который выполянется или отклоняется через delay времени.\n// ✅ Значением промиса должен быть объект, в котором будут свойства position и delay со значениями одноименных параметров.\n// ✅ Используй начальный код функции для выбора того, что нужно сделать с промисом - выполнить или отклонить.\n\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('form');\nform.addEventListener('submit', onSubmit);\n\nfunction onSubmit(e) {\n  e.preventDefault();\n\n  const delayFirst = Number(form.delay.value);\n  const step = Number(form.step.value);\n  const amount = Number(form.amount.value);\n\n  for (let i = 0; i < amount; i += 1) {\n    const delay = delayFirst + step * i;\n    const position = i + 1;\n\n    setTimeout(() => {\n      createPromise(position, delay)\n        .then(onSuccess)\n        .catch(onError)\n        .finally(() => form.reset());\n    }, delay);\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((res, rej) => {\n    if (shouldResolve) {\n      res({ position, delay });\n    } else {\n      rej({ position, delay });\n    }\n  });\n}\n\nfunction onSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$onSuccess","param","position","delay","$parcel$interopDefault","Notify","success","concat","$ce04d3a99e08e73b$var$onError","failure","addEventListener","e","delayFirst","step","i","setTimeout","shouldResolve","Math","random","Promise","res","rej","$ce04d3a99e08e73b$var$createPromise","then","catch","finally","reset","preventDefault","Number","value","amount","i1","_loop"],"version":3,"file":"03-promises.48ead72f.js.map"}